// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "github.com/gustavolimam/coinext-challenge/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserI is an autogenerated mock type for the UserI type
type UserI struct {
	mock.Mock
}

// AddOrRemoveItem provides a mock function with given fields: item
func (_m *UserI) AddOrRemoveItem(item *model.Inventory) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Inventory) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *UserI) CreateUser(user *model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Trade provides a mock function with given fields: userID
func (_m *UserI) Trade(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// perfectMatch provides a mock function with given fields: itemToTrade, users
func (_m *UserI) perfectMatch(itemToTrade model.Inventory, users []model.User) *model.User {
	ret := _m.Called(itemToTrade, users)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(model.Inventory, []model.User) *model.User); ok {
		r0 = rf(itemToTrade, users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	return r0
}

type mockConstructorTestingTNewUserI interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserI creates a new instance of UserI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserI(t mockConstructorTestingTNewUserI) *UserI {
	mock := &UserI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
