// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "github.com/gustavolimam/coinext-challenge/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Queries is an autogenerated mock type for the Queries type
type Queries struct {
	mock.Mock
}

// AddOrRemoveItem provides a mock function with given fields: inventory
func (_m *Queries) AddOrRemoveItem(inventory *model.Inventory) error {
	ret := _m.Called(inventory)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Inventory) error); ok {
		r0 = rf(inventory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *Queries) CreateUser(user *model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: userID
func (_m *Queries) GetUser(userID string) (*model.User, error) {
	ret := _m.Called(userID)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields:
func (_m *Queries) ListUsers() ([]model.User, error) {
	ret := _m.Called()

	var r0 []model.User
	if rf, ok := ret.Get(0).(func() []model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQueries interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueries creates a new instance of Queries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueries(t mockConstructorTestingTNewQueries) *Queries {
	mock := &Queries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
